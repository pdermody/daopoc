/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Box, BoxInterface } from "../../contracts/Box";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "newColor",
        type: "string",
      },
    ],
    name: "ColorChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newSize",
        type: "uint256",
      },
    ],
    name: "SizeChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "getColor",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newColor",
        type: "string",
      },
    ],
    name: "setColor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "setSize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610b9a8061010d6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639988fa691161005b5780639988fa69146100c65780639a86139b146100e2578063de8fa43114610100578063f2fde38b1461011e5761007d565b8063170ab40514610082578063715018a61461009e5780638da5cb5b146100a8575b600080fd5b61009c600480360381019061009791906106c1565b61013a565b005b6100a66101f7565b005b6100b061027f565b6040516100bd919061072f565b60405180910390f35b6100e060048036038101906100db9190610890565b6102a8565b005b6100ea610375565b6040516100f79190610961565b60405180910390f35b610108610407565b6040516101159190610992565b60405180910390f35b610138600480360381019061013391906109d9565b610411565b005b610142610508565b73ffffffffffffffffffffffffffffffffffffffff1661016061027f565b73ffffffffffffffffffffffffffffffffffffffff16146101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90610a52565b60405180910390fd5b806001819055507f7d6fee33bed3ddbf5f8cd6e4beac4c685060d43843e0254887f3ac485316d836816040516101ec9190610992565b60405180910390a150565b6101ff610508565b73ffffffffffffffffffffffffffffffffffffffff1661021d61027f565b73ffffffffffffffffffffffffffffffffffffffff1614610273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026a90610a52565b60405180910390fd5b61027d6000610510565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102b0610508565b73ffffffffffffffffffffffffffffffffffffffff166102ce61027f565b73ffffffffffffffffffffffffffffffffffffffff1614610324576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031b90610a52565b60405180910390fd5b806002908051906020019061033a9291906105d4565b507fea8482eb24fdcbd88250f9fd14644f201467fcaf3c5f08a0675ed9d46977ae3b8160405161036a9190610961565b60405180910390a150565b60606002805461038490610aa1565b80601f01602080910402602001604051908101604052809291908181526020018280546103b090610aa1565b80156103fd5780601f106103d2576101008083540402835291602001916103fd565b820191906000526020600020905b8154815290600101906020018083116103e057829003601f168201915b5050505050905090565b6000600154905090565b610419610508565b73ffffffffffffffffffffffffffffffffffffffff1661043761027f565b73ffffffffffffffffffffffffffffffffffffffff161461048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048490610a52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f390610b44565b60405180910390fd5b61050581610510565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546105e090610aa1565b90600052602060002090601f0160209004810192826106025760008555610649565b82601f1061061b57805160ff1916838001178555610649565b82800160010185558215610649579182015b8281111561064857825182559160200191906001019061062d565b5b509050610656919061065a565b5090565b5b8082111561067357600081600090555060010161065b565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61069e8161068b565b81146106a957600080fd5b50565b6000813590506106bb81610695565b92915050565b6000602082840312156106d7576106d6610681565b5b60006106e5848285016106ac565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610719826106ee565b9050919050565b6107298161070e565b82525050565b60006020820190506107446000830184610720565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61079d82610754565b810181811067ffffffffffffffff821117156107bc576107bb610765565b5b80604052505050565b60006107cf610677565b90506107db8282610794565b919050565b600067ffffffffffffffff8211156107fb576107fa610765565b5b61080482610754565b9050602081019050919050565b82818337600083830152505050565b600061083361082e846107e0565b6107c5565b90508281526020810184848401111561084f5761084e61074f565b5b61085a848285610811565b509392505050565b600082601f8301126108775761087661074a565b5b8135610887848260208601610820565b91505092915050565b6000602082840312156108a6576108a5610681565b5b600082013567ffffffffffffffff8111156108c4576108c3610686565b5b6108d084828501610862565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109135780820151818401526020810190506108f8565b83811115610922576000848401525b50505050565b6000610933826108d9565b61093d81856108e4565b935061094d8185602086016108f5565b61095681610754565b840191505092915050565b6000602082019050818103600083015261097b8184610928565b905092915050565b61098c8161068b565b82525050565b60006020820190506109a76000830184610983565b92915050565b6109b68161070e565b81146109c157600080fd5b50565b6000813590506109d3816109ad565b92915050565b6000602082840312156109ef576109ee610681565b5b60006109fd848285016109c4565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610a3c6020836108e4565b9150610a4782610a06565b602082019050919050565b60006020820190508181036000830152610a6b81610a2f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ab957607f821691505b602082108103610acc57610acb610a72565b5b50919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610b2e6026836108e4565b9150610b3982610ad2565b604082019050919050565b60006020820190508181036000830152610b5d81610b21565b905091905056fea26469706673582212208acb4070e1f9538c1ba73228c43d3a29e4d3d7da52d83788dbce474d8e9511f464736f6c634300080d0033";

type BoxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BoxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Box__factory extends ContractFactory {
  constructor(...args: BoxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Box> {
    return super.deploy(overrides || {}) as Promise<Box>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Box {
    return super.attach(address) as Box;
  }
  override connect(signer: Signer): Box__factory {
    return super.connect(signer) as Box__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BoxInterface {
    return new utils.Interface(_abi) as BoxInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Box {
    return new Contract(address, _abi, signerOrProvider) as Box;
  }
}
